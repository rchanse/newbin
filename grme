# this script will use the file                          
# grep a string against the individual member of it

NAMES_list=/home/$USER/bin/grmelist    # file name of list to process
NAMES_list=$HOME/etc/grmelist    # file name of list to process
OUTLIST=/home/$USER/bin/grmeout    # file name of list to process
OUTLIST=$HOME/etc/grmeout    # file name of list to process

if [ ".$1" == "." ]; then
echo " files-to-search list   :"$NAMES_list
echo " grep/matches are found :"$OUTLIST
echo " grme - grep for a given-string in a list of files"
echo "  method: 1. decide on a list of files (say in 'file-list' "
echo "          2. grme rep file-list   replace to files-to-search"
echo "            2a. add names by hand editing  grme 0"
echo "            2b. names to be relative/explicit(else $PWD.name)"
echo "          3. grme srchstr=> create grep/matches "
echo "          4. grme out        vim-s to grep/match file"
echo "          5. grme file#      vim-s to file   " 
echo " grme parm1 parm2"
echo "   parm1 - 0  enter the list of name via vim                     "
echo "         - / in char 1 - remove first char and use as char-str   "
echo "         - n (numeric) vim to the n-th file in files-to-search.  "
echo "         - n m   vim +m n-th-file  ( go to line start of line m) "
echo "         - char-str   value to be grep-ed for                    "
echo "         - rep  replace the names list by file in parm2          "
echo "         - o  vim to "$OUTLIST" of found files     "
echo "   parm2 - file name used with 'rep'"
echo " NOTES ! to search for a number - present /number                "
echo "         to search for '/string'  present '//string'             "
echo "                                                                 "
exit
fi


# nl is the number of entries in list of names
if [ -f $NAMES_list ]; then                # assume lines in NAMES_list
  nl=`wc $NAMES_list | awk '{print $1}'`  
  if [ ".$debug" == ".TRUE" ]; then
    echo $nl $NAMES_list
  fi
else
  echo "No $NAMES_list found, I quit"
  exit
fi

echo "\$1 is $1"
# use $1 vim to edit the list in question
# if [ ".$1" == ".vim" -o ".$1" == ".0" ]; then
if [ ".$1" == ".." -o ".$1" == ".0" ]; then
   vim $NAMES_list
   exit
fi

# use $1 vim to edit the output of a search
# u
if [ ".$1" == ".o"  ]; then
   vim $OUTLIST
   exit
fi
# use $1 to refresh/reload grmelist 
if [ ".$1" == ".rep" ]; then
   cp $2 $NAMES_list
   exit
fi

# function for checking if a value is an integer type value 
#  found linuxquestion
function is_integer() {
  printf "%d" $1 > /dev/null 2>&1
  return $?
}

# checking for an integer is in range  between 1 and nl
function in_range() {
  if [ $1 -ge 1 ] && [ $1 -le $nl ] ; then
    return 0
  else
    return 1 
  fi
}

function do_as_integer() {
if  is_integer $1; then                             # an integer ?
# echo "just in" $1
  subparam1=$1
  subparam2=$2
# echo "<>"$subparam1"<>"$subparam2"<>" 
# read
  if in_range $subparam1; then                              # in range   ?
    thefile=`head -n$subparam1 $NAMES_list  | tail -n1`     # select file to vim
    offset=""  
#   echo "parm2 is >"$subparam2"<"
    if [ ".$subparam2" == "." ]; then
        offset=" "
    elif  is_integer $subparam2;then
       offset="+"$subparam2
    fi
    vim $offset $thefile
    echo "vim "$offset $thefile
    exit                                            # out of exec
  else
    echo $1 is not in range 1 - $nl size of $NAMES_list
    exit
  fi
fi
#cho "out the bottom"
#ead
return 0
}

careifnumber="yes"
param1=$1                        # parm1 from cmdline
param2=$2                        # parm2 from cmdline
#echo $param1
lead=${param1:0:1}      # grab lead char of $1 passed in
if [ ".$lead" == "./" ]; then
  careifnumber="no"
  param1=${param1:1}     # throw away lead char
#else
#  echo $lead
#  read
fi

#echo "debug " $param1 $careifnumber
#read answer

if [ ".$careifnumber" == ".yes" ]; then
  do_as_integer $param1 $param2
fi

# process the list
#
#  next line empties OUTLIST from before"
echo "00 searching for >"$1"< Start line" | tee $OUTLIST 
echo "Contents below line found, file found   " | tee -a $OUTLIST 
echo " ## line no,  line contents       " | tee -a $OUTLIST 
echo " ==>file num in grmelist  filename" | tee -a $OUTLIST 
echo ".................................." | tee -a $OUTLIST 
let index=1
  while [ $index -le $nl ]; do
    thefile=`head -n$index $NAMES_list  | tail -n1`
    # Handle the tilde  
    if [ ${thefile:0:1} == "~" ] ; then
      lead=$HOME
      tailend=${thefile:1}
      thefile=$lead$tailend
    fi
    grep -n $1 $thefile  | tee -a $OUTLIST  # show matching lines
    grep -n $1 $thefile > /dev/null     # this time for the retcode
    grep_retcd=$?                # remember grep return code
    if [ ".$grep_retcd" == ".0" ]; then
      echo "::===>>"$index   $thefile "<<=== " | tee -a $OUTLIST
    fi
    let index=$index+1
  done
